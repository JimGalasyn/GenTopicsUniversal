using OsgContentPublishing.ReferencePipelineLib.Documentation;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OsgContentPublishing.GenTopicsUniversal.Documentation
{
    /// <summary>
    /// Guidance for commenting your code effectively for autogenerated documentation.
    /// </summary>
    [DocumentationOnly( true, "Style Guide for Code Comments" )]
    public class Style_guide_for_code_comments
    {
        /// <summary>
        /// Consider the following guidance when commenting any source code.
        /// </summary>
        /// <remarks>
        /// <para>Use <see cref="DocumentationOnlyAttribute"/> classes (sidecar files) 
        /// for long topics and conceptual documentation.</para>
        /// <para>Adhere to MTPS style guide (https://worldready.cloudapp.net/StyleGuide/Read?id=2547).</para>
        /// <para>For inheritance, don't explicitly call out base or deriving types. 
        /// For example, for class Foo, which implements the IFoo interface, don't write 
        /// "Implements IFoo" in comments. GTU should be smart enough to infer inheritance.
        /// </para>
        /// <para>Keep code comments readable in code. Mostly, this means that lines should be 
        /// broken more-or-less at the same column. Column 80 is the old-school line width,
        /// but this can look congested when viewing in the code editor.
        /// </para>
        /// </remarks>
        [DocumentationOnly( true, "General" )]
        public int GeneralSection { get; set; }

        /// <summary>
        /// Consider the following guidance for commenting native (C/C++/IDL) code.
        /// </summary>
        /// <remarks>
        /// <para>Use "/*!" and "//!" to start code comments that you want 
        /// to be included in the documentation.</para>
        /// <para>Use namespaces to partition code and indicate intent.</para>
        /// <para>Prefer commenting .idl and .h files to .cpp files.</para>
        /// <para>Minimize use of typedefs and #defines, because they can confuse Doxygen.</para>
        /// </remarks>
        [DocumentationOnly( true, "Native code" )]
        public int NativeCodeSection { get; set; }

        /// <summary>
        /// Consider the following guidance for commenting managed code.
        /// </summary>
        /// <remarks>
        /// <para>Use "///" to start code comments that you want 
        /// to be included in the documentation.</para>
        /// <para>Take advantage of the XML schema elements that managed
        /// languages support. GTU understands these are tries to render
        /// them appropriately.
        /// </para>
        /// </remarks>
        [DocumentationOnly( true, "Managed code" )]
        public int ManagedCodeSection { get; set; }

    }
}
